// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/processor/processor.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"
	models "telegram-processor/internal/models"
	json "telegram-processor/pkg/models/json"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockMessagesRepository is a mock of MessagesRepository interface.
type MockMessagesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesRepositoryMockRecorder
}

// MockMessagesRepositoryMockRecorder is the mock recorder for MockMessagesRepository.
type MockMessagesRepositoryMockRecorder struct {
	mock *MockMessagesRepository
}

// NewMockMessagesRepository creates a new mock instance.
func NewMockMessagesRepository(ctrl *gomock.Controller) *MockMessagesRepository {
	mock := &MockMessagesRepository{ctrl: ctrl}
	mock.recorder = &MockMessagesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagesRepository) EXPECT() *MockMessagesRepositoryMockRecorder {
	return m.recorder
}

// GetClosest mocks base method.
func (m *MockMessagesRepository) GetClosest(ctx context.Context, search []float32, limit int64) ([]*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClosest", ctx, search, limit)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClosest indicates an expected call of GetClosest.
func (mr *MockMessagesRepositoryMockRecorder) GetClosest(ctx, search, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClosest", reflect.TypeOf((*MockMessagesRepository)(nil).GetClosest), ctx, search, limit)
}

// GetMessagesWithoutVectors mocks base method.
func (m *MockMessagesRepository) GetMessagesWithoutVectors(ctx context.Context) ([]*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesWithoutVectors", ctx)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesWithoutVectors indicates an expected call of GetMessagesWithoutVectors.
func (mr *MockMessagesRepositoryMockRecorder) GetMessagesWithoutVectors(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesWithoutVectors", reflect.TypeOf((*MockMessagesRepository)(nil).GetMessagesWithoutVectors), ctx)
}

// ImportChatFromJson mocks base method.
func (m *MockMessagesRepository) ImportChatFromJson(ctx context.Context, chat *json.ChatJson) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportChatFromJson", ctx, chat)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportChatFromJson indicates an expected call of ImportChatFromJson.
func (mr *MockMessagesRepositoryMockRecorder) ImportChatFromJson(ctx, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportChatFromJson", reflect.TypeOf((*MockMessagesRepository)(nil).ImportChatFromJson), ctx, chat)
}

// InsertEmbeddings mocks base method.
func (m *MockMessagesRepository) InsertEmbeddings(ctx context.Context, embeddings []*models.MessageEmbedding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEmbeddings", ctx, embeddings)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertEmbeddings indicates an expected call of InsertEmbeddings.
func (mr *MockMessagesRepositoryMockRecorder) InsertEmbeddings(ctx, embeddings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEmbeddings", reflect.TypeOf((*MockMessagesRepository)(nil).InsertEmbeddings), ctx, embeddings)
}

// MockEmbeddingService is a mock of EmbeddingService interface.
type MockEmbeddingService struct {
	ctrl     *gomock.Controller
	recorder *MockEmbeddingServiceMockRecorder
}

// MockEmbeddingServiceMockRecorder is the mock recorder for MockEmbeddingService.
type MockEmbeddingServiceMockRecorder struct {
	mock *MockEmbeddingService
}

// NewMockEmbeddingService creates a new mock instance.
func NewMockEmbeddingService(ctrl *gomock.Controller) *MockEmbeddingService {
	mock := &MockEmbeddingService{ctrl: ctrl}
	mock.recorder = &MockEmbeddingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmbeddingService) EXPECT() *MockEmbeddingServiceMockRecorder {
	return m.recorder
}

// GetEmbedding mocks base method.
func (m *MockEmbeddingService) GetEmbedding(ctx context.Context, text string) ([]float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmbedding", ctx, text)
	ret0, _ := ret[0].([]float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmbedding indicates an expected call of GetEmbedding.
func (mr *MockEmbeddingServiceMockRecorder) GetEmbedding(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmbedding", reflect.TypeOf((*MockEmbeddingService)(nil).GetEmbedding), ctx, text)
}

// GetEmbeddingsPrice mocks base method.
func (m *MockEmbeddingService) GetEmbeddingsPrice(ctx context.Context, messages []*models.Message, tarif models.EmbeddingTarif) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmbeddingsPrice", ctx, messages, tarif)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmbeddingsPrice indicates an expected call of GetEmbeddingsPrice.
func (mr *MockEmbeddingServiceMockRecorder) GetEmbeddingsPrice(ctx, messages, tarif interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmbeddingsPrice", reflect.TypeOf((*MockEmbeddingService)(nil).GetEmbeddingsPrice), ctx, messages, tarif)
}

// GetMessageEmbeddings mocks base method.
func (m *MockEmbeddingService) GetMessageEmbeddings(ctx context.Context, messages []*models.Message) ([]*models.MessageEmbedding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageEmbeddings", ctx, messages)
	ret0, _ := ret[0].([]*models.MessageEmbedding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageEmbeddings indicates an expected call of GetMessageEmbeddings.
func (mr *MockEmbeddingServiceMockRecorder) GetMessageEmbeddings(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageEmbeddings", reflect.TypeOf((*MockEmbeddingService)(nil).GetMessageEmbeddings), ctx, messages)
}

// MockMessageProcessor is a mock of MessageProcessor interface.
type MockMessageProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProcessorMockRecorder
}

// MockMessageProcessorMockRecorder is the mock recorder for MockMessageProcessor.
type MockMessageProcessorMockRecorder struct {
	mock *MockMessageProcessor
}

// NewMockMessageProcessor creates a new mock instance.
func NewMockMessageProcessor(ctrl *gomock.Controller) *MockMessageProcessor {
	mock := &MockMessageProcessor{ctrl: ctrl}
	mock.recorder = &MockMessageProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProcessor) EXPECT() *MockMessageProcessorMockRecorder {
	return m.recorder
}

// CalculateAndSaveEmbeddings mocks base method.
func (m *MockMessageProcessor) CalculateAndSaveEmbeddings(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateAndSaveEmbeddings", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateAndSaveEmbeddings indicates an expected call of CalculateAndSaveEmbeddings.
func (mr *MockMessageProcessorMockRecorder) CalculateAndSaveEmbeddings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateAndSaveEmbeddings", reflect.TypeOf((*MockMessageProcessor)(nil).CalculateAndSaveEmbeddings), ctx)
}

// GetClosest mocks base method.
func (m *MockMessageProcessor) GetClosest(ctx context.Context, search string, limit int64) ([]*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClosest", ctx, search, limit)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClosest indicates an expected call of GetClosest.
func (mr *MockMessageProcessorMockRecorder) GetClosest(ctx, search, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClosest", reflect.TypeOf((*MockMessageProcessor)(nil).GetClosest), ctx, search, limit)
}

// GetEmbeddingPrice mocks base method.
func (m *MockMessageProcessor) GetEmbeddingPrice(ctx context.Context, tarif models.EmbeddingTarif) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmbeddingPrice", ctx, tarif)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmbeddingPrice indicates an expected call of GetEmbeddingPrice.
func (mr *MockMessageProcessorMockRecorder) GetEmbeddingPrice(ctx, tarif interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmbeddingPrice", reflect.TypeOf((*MockMessageProcessor)(nil).GetEmbeddingPrice), ctx, tarif)
}

// ImportJson mocks base method.
func (m *MockMessageProcessor) ImportJson(ctx context.Context, reader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportJson", ctx, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportJson indicates an expected call of ImportJson.
func (mr *MockMessageProcessorMockRecorder) ImportJson(ctx, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportJson", reflect.TypeOf((*MockMessageProcessor)(nil).ImportJson), ctx, reader)
}
