// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package json

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson66c1e240DecodeTelegramProcessorPkgModelsJson(in *jlexer.Lexer, out *TextEntityJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeTelegramProcessorPkgModelsJson(out *jwriter.Writer, in TextEntityJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextEntityJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeTelegramProcessorPkgModelsJson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextEntityJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeTelegramProcessorPkgModelsJson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextEntityJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeTelegramProcessorPkgModelsJson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextEntityJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeTelegramProcessorPkgModelsJson(l, v)
}
func easyjson66c1e240DecodeTelegramProcessorPkgModelsJson1(in *jlexer.Lexer, out *MessageJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.TelegramID = int64(in.Int64())
		case "text_entities":
			if in.IsNull() {
				in.Skip()
				out.TextEntities = nil
			} else {
				in.Delim('[')
				if out.TextEntities == nil {
					if !in.IsDelim(']') {
						out.TextEntities = make([]*TextEntityJson, 0, 8)
					} else {
						out.TextEntities = []*TextEntityJson{}
					}
				} else {
					out.TextEntities = (out.TextEntities)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *TextEntityJson
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(TextEntityJson)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.TextEntities = append(out.TextEntities, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from":
			out.Username = string(in.String())
		case "from_id":
			out.UserID = string(in.String())
		case "date_unixtime":
			out.DateUnix = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeTelegramProcessorPkgModelsJson1(out *jwriter.Writer, in MessageJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TelegramID))
	}
	{
		const prefix string = ",\"text_entities\":"
		out.RawString(prefix)
		if in.TextEntities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.TextEntities {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"date_unixtime\":"
		out.RawString(prefix)
		out.String(string(in.DateUnix))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeTelegramProcessorPkgModelsJson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeTelegramProcessorPkgModelsJson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeTelegramProcessorPkgModelsJson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeTelegramProcessorPkgModelsJson1(l, v)
}
func easyjson66c1e240DecodeTelegramProcessorPkgModelsJson2(in *jlexer.Lexer, out *ChatJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "type":
			out.Type = string(in.String())
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*MessageJson, 0, 8)
					} else {
						out.Messages = []*MessageJson{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *MessageJson
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(MessageJson)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66c1e240EncodeTelegramProcessorPkgModelsJson2(out *jwriter.Writer, in ChatJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix)
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Messages {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66c1e240EncodeTelegramProcessorPkgModelsJson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66c1e240EncodeTelegramProcessorPkgModelsJson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66c1e240DecodeTelegramProcessorPkgModelsJson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66c1e240DecodeTelegramProcessorPkgModelsJson2(l, v)
}
